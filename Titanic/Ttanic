{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.7.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2022-08-14T01:49:44.062588Z","iopub.execute_input":"2022-08-14T01:49:44.063014Z","iopub.status.idle":"2022-08-14T01:49:44.075869Z","shell.execute_reply.started":"2022-08-14T01:49:44.062975Z","shell.execute_reply":"2022-08-14T01:49:44.074598Z"},"trusted":true},"execution_count":167,"outputs":[]},{"cell_type":"markdown","source":"Load files","metadata":{}},{"cell_type":"code","source":"train_data = pd.read_csv('/kaggle/input/titanic/train.csv')\n\ntest_data = pd.read_csv('/kaggle/input/titanic/test.csv')\n\ntrain_data","metadata":{"execution":{"iopub.status.busy":"2022-08-14T01:49:44.154217Z","iopub.execute_input":"2022-08-14T01:49:44.154849Z","iopub.status.idle":"2022-08-14T01:49:44.187463Z","shell.execute_reply.started":"2022-08-14T01:49:44.154816Z","shell.execute_reply":"2022-08-14T01:49:44.186435Z"},"trusted":true},"execution_count":168,"outputs":[]},{"cell_type":"markdown","source":"Look for missing values","metadata":{}},{"cell_type":"code","source":"train_data.isna().sum()","metadata":{"execution":{"iopub.status.busy":"2022-08-14T01:49:44.226403Z","iopub.execute_input":"2022-08-14T01:49:44.226826Z","iopub.status.idle":"2022-08-14T01:49:44.237361Z","shell.execute_reply.started":"2022-08-14T01:49:44.226789Z","shell.execute_reply":"2022-08-14T01:49:44.236347Z"},"trusted":true},"execution_count":169,"outputs":[]},{"cell_type":"code","source":"test_data.isna().sum()","metadata":{"execution":{"iopub.status.busy":"2022-08-14T01:49:44.301783Z","iopub.execute_input":"2022-08-14T01:49:44.302350Z","iopub.status.idle":"2022-08-14T01:49:44.311782Z","shell.execute_reply.started":"2022-08-14T01:49:44.302318Z","shell.execute_reply":"2022-08-14T01:49:44.310699Z"},"trusted":true},"execution_count":170,"outputs":[]},{"cell_type":"code","source":"train_data.columns.tolist()","metadata":{"execution":{"iopub.status.busy":"2022-08-14T01:49:44.379662Z","iopub.execute_input":"2022-08-14T01:49:44.380030Z","iopub.status.idle":"2022-08-14T01:49:44.387097Z","shell.execute_reply.started":"2022-08-14T01:49:44.380001Z","shell.execute_reply":"2022-08-14T01:49:44.385948Z"},"trusted":true},"execution_count":171,"outputs":[]},{"cell_type":"code","source":"train_data.Age.mean()","metadata":{"execution":{"iopub.status.busy":"2022-08-14T01:49:44.464710Z","iopub.execute_input":"2022-08-14T01:49:44.465840Z","iopub.status.idle":"2022-08-14T01:49:44.473408Z","shell.execute_reply.started":"2022-08-14T01:49:44.465799Z","shell.execute_reply":"2022-08-14T01:49:44.472120Z"},"trusted":true},"execution_count":172,"outputs":[]},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\n\n\ntrain_data['Age']=train_data['Age'].fillna(train_data['Age'].median()) #use mean for missing values\ntrain_data.loc[train_data[train_data.Embarked.isna()].index.tolist(),'Embarked']='S'\n\ntest_data.Age = test_data.Age.fillna(test_data.Age.median())\ntest_data.Fare=test_data.Fare.fillna(test_data.Fare.median())\n\n\n\nfeatures=['Pclass','Sex','Age','SibSp','Parch','Fare']\n\nX=pd.get_dummies(train_data[features])\ny=train_data.Survived\n\ntest_X=pd.get_dummies(test_data[features])\n\ntrain_X,val_X,train_y,val_y=train_test_split(X,y,random_state=0)","metadata":{"execution":{"iopub.status.busy":"2022-08-14T01:49:44.543264Z","iopub.execute_input":"2022-08-14T01:49:44.543672Z","iopub.status.idle":"2022-08-14T01:49:44.569594Z","shell.execute_reply.started":"2022-08-14T01:49:44.543611Z","shell.execute_reply":"2022-08-14T01:49:44.568492Z"},"trusted":true},"execution_count":173,"outputs":[]},{"cell_type":"code","source":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\n\nforest_model = RandomForestClassifier(random_state=0)\nforest_model.fit(train_X,train_y)\n\npredict_val = forest_model.predict(val_X)\nprint(accuracy_score(val_y,predict_val)*100,'%')","metadata":{"execution":{"iopub.status.busy":"2022-08-14T01:49:44.626884Z","iopub.execute_input":"2022-08-14T01:49:44.627266Z","iopub.status.idle":"2022-08-14T01:49:44.840810Z","shell.execute_reply.started":"2022-08-14T01:49:44.627236Z","shell.execute_reply":"2022-08-14T01:49:44.839577Z"},"trusted":true},"execution_count":174,"outputs":[]},{"cell_type":"code","source":"from sklearn.neural_network import MLPClassifier\n\nmlp_model = MLPClassifier(random_state=0,learning_rate_init=0.001,max_iter=500)\nmlp_model.fit(train_X,train_y)\n\npredict_val = mlp_model.predict(val_X)\nprint(accuracy_score(val_y,predict_val)*100,'%')","metadata":{"execution":{"iopub.status.busy":"2022-08-14T01:55:47.636738Z","iopub.execute_input":"2022-08-14T01:55:47.637171Z","iopub.status.idle":"2022-08-14T01:55:49.035175Z","shell.execute_reply.started":"2022-08-14T01:55:47.637132Z","shell.execute_reply":"2022-08-14T01:55:49.033468Z"},"trusted":true},"execution_count":184,"outputs":[]},{"cell_type":"code","source":"full_forest_model = RandomForestClassifier(random_state=0)\nfull_forest_model.fit(X,y)\n\npredict_test = full_forest_model.predict(test_X)","metadata":{"execution":{"iopub.status.busy":"2022-08-14T01:49:44.842879Z","iopub.execute_input":"2022-08-14T01:49:44.843325Z","iopub.status.idle":"2022-08-14T01:49:45.076230Z","shell.execute_reply.started":"2022-08-14T01:49:44.843283Z","shell.execute_reply":"2022-08-14T01:49:45.075175Z"},"trusted":true},"execution_count":175,"outputs":[]},{"cell_type":"code","source":"submission = pd.DataFrame({'PassengerId':test_data.PassengerId,'Survived':predict_test})\nsubmission.to_csv('submission.csv',index=False)","metadata":{"execution":{"iopub.status.busy":"2022-08-14T01:49:45.078219Z","iopub.execute_input":"2022-08-14T01:49:45.078529Z","iopub.status.idle":"2022-08-14T01:49:45.085771Z","shell.execute_reply.started":"2022-08-14T01:49:45.078500Z","shell.execute_reply":"2022-08-14T01:49:45.084728Z"},"trusted":true},"execution_count":176,"outputs":[]}]}
